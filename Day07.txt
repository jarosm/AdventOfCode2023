
Dictionary<char, int> cards1 = new Dictionary<char, int> { { '2', 2 }, { '3', 3 }, { '4', 4 }, { '5', 5 } , { '6', 6 }, { '7', 7 }, { '8', 8 }, { '9', 9 },
	{ 'T', 10 }, { 'J', 11 }, { 'Q', 12 }, { 'K', 13 }, { 'A', 14 } };

Dictionary<char, int> cards2 = new Dictionary<char, int> { { 'J', 1 }, { '2', 2 }, { '3', 3 }, { '4', 4 }, { '5', 5 } , { '6', 6 }, { '7', 7 }, { '8', 8 }, { '9', 9 },
	{ 'T', 10 }, { 'Q', 12 }, { 'K', 13 }, { 'A', 14 } };

Part1();

Part2();

Console.WriteLine("end");
Console.ReadLine();


List<(string hand, int strength, long bet)> ParseInput(bool part2 = false)
{
	var input = File.ReadAllLines("input.txt");

	List<(string hand, int strength, long bet)> hands = new List<(string hand, int strength, long bet)>();
	foreach (var hand in input)
	{
		var h = hand.Split(' ');
		string originalHand = h[0];

		if (part2)
		{
			// process jokers
			var groups = h[0].ToCharArray().GroupBy(x => x).OrderByDescending(g => g.Count()).ToList();
			int joker = groups.FindIndex(g => g.Key == 'J');
			if (joker != -1 && groups.Count > 1)
			{
				groups.RemoveAt(joker);
				h[0] = h[0].Replace('J', groups[0].Key);
			}
		}

		var counts = h[0].ToCharArray().GroupBy(x => x).OrderByDescending(g => g.Count()).Select(g => g.Count()).ToArray(); // Get card counts

		if (counts[0] == 5)
			hands.Add((originalHand, 6, long.Parse(h[1])));
		else if (counts[0] == 4)
			hands.Add((originalHand, 5, long.Parse(h[1])));
		else if (counts[0] == 3 && counts[1] == 2)
			hands.Add((originalHand, 4, long.Parse(h[1])));
		else if (counts[0] == 3)
			hands.Add((originalHand, 3, long.Parse(h[1])));
		else if (counts[0] == 2 && counts[1] == 2)
			hands.Add((originalHand, 2, long.Parse(h[1])));
		else if (counts[0] == 2)
			hands.Add((originalHand, 1, long.Parse(h[1])));
		else
			hands.Add((originalHand, 0, long.Parse(h[1])));
	}

	return hands;
}


void Part1()
{
	var hands = ParseInput();

	// Bubble sort from lower to higher
	List<(string hand, int strength, long bet)> sortedhands = new List<(string hand, int strength, long bet)>();
	foreach (var hand in hands)
	{
		int index = 0;
		while (index < sortedhands.Count)
		{
			if (CompareHands(hand.hand, hand.strength, sortedhands[index].hand, sortedhands[index].strength, cards1) == 1)
				index++;
			else
			{
				sortedhands.Insert(index, hand);
				break;
			}
		}
		if (index >= sortedhands.Count)
			sortedhands.Add(hand);
	}

	Console.WriteLine($"Part 1: {sortedhands.Select((h, i) => h.bet * (i + 1)).Sum()}");
}


void Part2()
{
	var hands = ParseInput(true);

	// Bubble sort from lower to higher
	List<(string hand, int strength, long bet)> sortedhands = new List<(string hand, int strength, long bet)>();
	foreach (var hand in hands)
	{
		int index = 0;
		while (index < sortedhands.Count)
		{
			if (CompareHands(hand.hand, hand.strength, sortedhands[index].hand, sortedhands[index].strength, cards2) == 1)
				index++;
			else
			{
				sortedhands.Insert(index, hand);
				break;
			}
		}
		if (index >= sortedhands.Count)
			sortedhands.Add(hand);
	}

	Console.WriteLine($"Part 2: {sortedhands.Select((h, i) => h.bet * (i + 1)).Sum()}");
}


int CompareHands(string h1, int s1, string h2, int s2, Dictionary<char, int> cards)
{
	if (s1 > s2)
		return 1;
	else if (s1 < s2)
		return -1;
	else
	{
		for (int i = 0; i < h1.Length; i++)
		{
			if (cards[h1[i]] > cards[h2[i]])
				return 1;
			else if  (cards[h1[i]] < cards[h2[i]])
				return -1;
		}
	}

	return 0;
}