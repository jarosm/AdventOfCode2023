
using System.Numerics;
using System.Xml.Linq;
using Map = System.Collections.Generic.Dictionary<System.Numerics.Complex, char>;

Complex Up = -Complex.ImaginaryOne;
Complex Down = Complex.ImaginaryOne;
Complex Left = -1;
Complex Right = 1;
Complex[] Dirs = new Complex[] { Up, Down, Left, Right };

Dictionary<char, Complex[]> exits = new()
{
	['<'] = new Complex[] { Left },
	['>'] = new Complex[] { Right },
	['^'] = new Complex[] { Up },
	['v'] = new Complex[] { Down },
	['.'] = Dirs,
	['#'] = Array.Empty<Complex>()
};

Part1();

Part2();

Console.WriteLine("end");
Console.ReadLine();


(long[], Edge[]) ParseInput(bool part2 = false)
{
	var lines = File.ReadAllLines("input.txt");

	if (part2)
	{
		for (int i = 0; i < lines.Length; i++)
			lines[i] = lines[i].Replace(">", ".").Replace("<", ".").Replace("v", ".").Replace("^", ".");
	}

	Map map = (
		from irow in Enumerable.Range(0, lines.Length)
		from icol in Enumerable.Range(0, lines[0].Length)
		let pos = new Complex(icol, irow)
		select new KeyValuePair<Complex, char>(pos, lines[irow][icol])
	).ToDictionary(x => x.Key, x => x.Value);

	var nodePos = (
		from pos in map.Keys
		orderby pos.Imaginary, pos.Real
		where IsFree(map, pos) && !IsRoad(map, pos)
		select pos
	).ToArray();

	var nodes = (
		from i in Enumerable.Range(0, nodePos.Length) select 1L << i
	).ToArray();

	var edges = (
		from i in Enumerable.Range(0, nodePos.Length)
		from j in Enumerable.Range(0, nodePos.Length)
		where i != j
		let distance = Distance(map, nodePos[i], nodePos[j])
		where distance > 0
		select new Edge(nodes[i], nodes[j], distance)
	).ToArray();

	return (nodes, edges);
}


void Part1()
{
	var (nodes, edges) = ParseInput();
	var (start, goal) = (nodes.First(), nodes.Last());

	var cache = new Dictionary<(long, long), int>();
	int LongestPath(long node, long visited)
	{
		if (node == goal)
		{
			return 0;
		}
		else if ((visited & node) != 0)
		{
			return int.MinValue;
		}
		var key = (node, visited);
		if (!cache.ContainsKey(key))
		{
			cache[key] = edges
				.Where(e => e.start == node)
				.Select(e => e.distance + LongestPath(e.end, visited | node))
				.Max();
		}
		return cache[key];
	}

	Console.WriteLine($"Part 1: {LongestPath(start, 0)}");
}


void Part2()
{
	var (nodes, edges) = ParseInput(true);
	var (start, goal) = (nodes.First(), nodes.Last());

	var cache = new Dictionary<(long, long), int>();
	int LongestPath(long node, long visited)
	{
		if (node == goal)
		{
			return 0;
		}
		else if ((visited & node) != 0)
		{
			return int.MinValue;
		}
		var key = (node, visited);
		if (!cache.ContainsKey(key))
		{
			cache[key] = edges
				.Where(e => e.start == node)
				.Select(e => e.distance + LongestPath(e.end, visited | node))
				.Max();
		}
		return cache[key];
	}

	Console.WriteLine($"Part 2: {LongestPath(start, 0)}");
}


bool IsFree(Map map, Complex p) => map.ContainsKey(p) && map[p] != '#';

bool IsRoad(Map map, Complex p) => IsFree(map, p) && Dirs.Count(d => IsFree(map, p + d)) == 2;


int Distance(Map map, Complex crossroadA, Complex crossroadB)
{
	var q = new Queue<(Complex, int)>();
	q.Enqueue((crossroadA, 0));

	var visited = new HashSet<Complex> { crossroadA };
	while (q.Any())
	{
		var (pos, dist) = q.Dequeue();
		foreach (var dir in exits[map[pos]])
		{
			var posT = pos + dir;
			if (posT == crossroadB)
			{
				return dist + 1;
			}
			else if (IsRoad(map, posT) && !visited.Contains(posT))
			{
				visited.Add(posT);
				q.Enqueue((posT, dist + 1));
			}
		}
	}
	return -1;
}


record Edge(long start, long end, int distance);