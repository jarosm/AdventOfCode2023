

Part1();

Part2();

Console.WriteLine("end");
Console.ReadLine();


int[][] ParseInput()
{
	var input = File.ReadAllLines("input.txt").Select(s => s.ToCharArray().Select(n => int.Parse(n.ToString())).ToArray()).ToArray();
	
	return input;
}


void Part1()
{
	var map = ParseInput();

	var queue = new PriorityQueue<Path, int>();
	var visited = new HashSet<string>();
	var totalHeat = 0;

	queue.Enqueue(new Path(new(0, 0), Direction.Right, 0), 0);
	while (queue.Count > 0)
	{
		var path = queue.Dequeue();

		if (path.Position.Row == map.Length - 1 && path.Position.Col == map[0].Length - 1)
		{
			totalHeat = path.Heat;
			break;
		}

		if (path.StraightLineLength < 3)
			TryMove(map, visited, queue, path, path.Direction);

		TryMove(map, visited, queue, path, path.Direction.TurnLeft());
		TryMove(map, visited, queue, path, path.Direction.TurnRight());
	}

	Console.WriteLine($"Part 1: {totalHeat}");
}


void Part2()
{
	var map = ParseInput();

	var queue = new PriorityQueue<Path, int>();
	var visited = new HashSet<string>();
	var totalHeat = 0;

	queue.Enqueue(new Path(new(0, 0), Direction.Right, 0), 0);
	queue.Enqueue(new Path(new(0, 0), Direction.Down, 0), 0);
	while (queue.Count > 0)
	{
		var path = queue.Dequeue();

		if (path.Position.Row == map.Length - 1 && path.Position.Col == map[0].Length - 1 && path.StraightLineLength >= 4)
		{
			totalHeat = path.Heat;
			break;
		}

		if (path.StraightLineLength < 10)
			TryMove(map, visited, queue, path, path.Direction);

		if (path.StraightLineLength >= 4)
		{
			TryMove(map, visited, queue, path, path.Direction.TurnLeft());
			TryMove(map, visited, queue, path, path.Direction.TurnRight());
		}
	}

	Console.WriteLine($"Part 2: {totalHeat}");
}


void TryMove(int[][] map, HashSet<string> visited, PriorityQueue<Path, int> queue, Path path, Direction direction)
{
	var candidate = new Path(path.Position.Move(direction), direction, direction == path.Direction ? path.StraightLineLength + 1 : 1);

	if (candidate.Position.Row < 0 || candidate.Position.Row >= map.Length ||
		candidate.Position.Col < 0 || candidate.Position.Col >= map[0].Length)
	{
		return;
	}

	var key = $"{candidate.Position.Row},{candidate.Position.Col},{candidate.Direction.Row},{candidate.Direction.Col},{candidate.StraightLineLength}";
	if (visited.Contains(key))
	{
		return;
	}

	visited.Add(key);

	candidate.Heat = path.Heat + map[candidate.Position.Row][candidate.Position.Col];
	queue.Enqueue(candidate, candidate.Heat);
}


internal class Path
{
	public readonly Position Position;
	public readonly Direction Direction;
	public readonly int StraightLineLength;
	public int Heat { get; set; }

	public Path(Position position, Direction direction, int straightLineLength)
	{
		Position = position;
		Direction = direction;
		StraightLineLength = straightLineLength;
	}
}


internal class Direction
{
	public readonly int Row;
	public readonly int Col;

	public Direction(int row, int col)
	{
		Row = row;
		Col = col;
	}

	public Direction TurnLeft()
	{
		return new Direction(-Col, Row);
	}

	public Direction TurnRight()
	{
		return new Direction(Col, -Row);
	}

	public static Direction Up = new(-1, 0);
	public static Direction Down = new(1, 0);
	public static Direction Left = new(0, -1);
	public static Direction Right = new(0, 1);
}


internal class Position
{
	public readonly int Row;
	public readonly int Col;

	public Position(int row, int col)
	{
		Row = row;
		Col = col;
	}

	public Position Move(Direction dir)
	{
		return new Position(Row + dir.Row, Col + dir.Col);
	}
}