
using System.Text.RegularExpressions;

List<Brick> AllBricks = new();
Dictionary<char, int> BrickFallCounts = new();

ParseInput();

Part1();

Part2();

Console.WriteLine("end");
Console.ReadLine();


void ParseInput()
{
	char i = 'A';
	foreach (var l in File.ReadAllLines("input.txt"))
	{
		var n = Regex.Matches(l, "-?\\d+").Select(m => int.Parse(m.Value)).ToList();
		Brick tmp = new(i, (n[0], n[1], n[2]), (n[3], n[4], n[5]));
		AllBricks.Add(tmp);
		i++;
	}


	//Shift bricks that can move down until everyone is settled
	int numBricksShifted;
	do
	{
		numBricksShifted = 0;

		HashSet<Coordinate3D> AllBrickPoints = new();

		foreach (var b in AllBricks) foreach (var p in b.Members()) AllBrickPoints.Add(p);

		foreach (var b in AllBricks)
		{
			if (b.Members().Any(m => m.z == 1 || (AllBrickPoints.Contains(m - (0, 0, 1)) && !b.Members().Contains(m - (0, 0, 1))))) continue;

			b.Start = b.Start - (0, 0, 1);
			b.End = b.End - (0, 0, 1);
			numBricksShifted++;
		}


	} while (numBricksShifted != 0);

	AllBricks.Sort((a, b) => a.Start.z.CompareTo(b.Start.z));

	//Get everyone's interactions with one another.
	foreach (var b in AllBricks)
	{
		foreach (var p in AllBricks.Where(a => a.Start.z == b.End.z + 1))
		{
			foreach (var m in b.Members())
			{
				if (p.Members().Any(a => a.x == m.x && a.y == m.y && a.z - 1 == m.z))
				{
					b.Supports.Add(p);
					p.SupportedBy.Add(b);
					break;
				}
			}
		}
	}

	foreach (var b in AllBricks) BrickFallCount(b, new(), true);
}


void Part1()
{
	Console.WriteLine($"Part 1: {BrickFallCounts.Count(kvp => kvp.Value == 0)}");
}


void Part2()
{
	Console.WriteLine($"Part 2: {BrickFallCounts.Sum(k => k.Value)}");
}



void BrickFallCount(Brick b, List<char> toIgnore, bool updateDict = false)
{
	toIgnore.Add(b.id);
	if (b.Supports.Count == 0)
	{
		if (updateDict) BrickFallCounts[b.id] = 0;
	}

	//Collect all that would fall with the removal of that support
	var bricksThatFall = b.Supports.Where(p => p.SupportedBy.Count(a => !toIgnore.Contains(a.id)) == 0).ToList();
	foreach (var p in bricksThatFall)
	{
		toIgnore.Add(p.id);
	}

	foreach (var p in bricksThatFall)
	{
		BrickFallCount(p, toIgnore);
	}

	if (updateDict) BrickFallCounts[b.id] = toIgnore.Distinct().Count() - 1;
}



public class Coordinate3D
{
	public readonly int x;
	public readonly int y;
	public readonly int z;

	public Coordinate3D(int x, int y, int z)
	{
		this.x = x;
		this.y = y;
		this.z = z;
	}

	public Coordinate3D(string stringformat)
	{	
		var n = Regex.Matches(stringformat, "-?\\d+").Select(m => int.Parse(m.Value)).ToArray();
		x = n[0];
		y = n[1];
		z = n[2];
	}

	public static implicit operator Coordinate3D((int x, int y, int z) a) => new(a.x, a.y, a.z);

	public static implicit operator (int x, int y, int z)(Coordinate3D a) => (a.x, a.y, a.z);
	public static Coordinate3D operator +(Coordinate3D a) => a;
	public static Coordinate3D operator +(Coordinate3D a, Coordinate3D b) => new(a.x + b.x, a.y + b.y, a.z + b.z);
	public static Coordinate3D operator -(Coordinate3D a) => new(-a.x, -a.y, -a.z);
	public static Coordinate3D operator -(Coordinate3D a, Coordinate3D b) => a + (-b);
	public static bool operator ==(Coordinate3D a, Coordinate3D b) => (a.x == b.x && a.y == b.y && a.z == b.z);
	public static bool operator !=(Coordinate3D a, Coordinate3D b) => (a.x != b.x || a.y != b.y || a.z != b.z);

	public int ManhattanDistance(Coordinate3D other) => (int)(Math.Abs(x - other.x) + Math.Abs(y - other.y) + Math.Abs(z - other.z));
	public int ManhattanMagnitude() => Math.Abs(x) + Math.Abs(y) + Math.Abs(z);

	public override bool Equals(object obj)
	{
		if (obj.GetType() != typeof(Coordinate3D)) return false;
		return this == (Coordinate3D)obj;
	}

	public override int GetHashCode()
	{
		//Primes times coordinates for fewer collisions
		return (137 * x + 149 * y + 163 * z);
	}
	public override string ToString()
	{
		return $"{x}, {y}, {z}";
	}

	public static Coordinate3D[] GetNeighbors()
	{
		return neighbors3D;
	}

	internal void Deconstruct(out int x, out int y, out int z)
	{
		x = this.x;
		y = this.y;
		z = this.z;
	}

	private static readonly Coordinate3D[] neighbors3D =
	{
			(-1,-1,-1),(-1,-1,0),(-1,-1,1),(-1,0,-1),(-1,0,0),(-1,0,1),(-1,1,-1),(-1,1,0),(-1,1,1),
			(0,-1,-1), (0,-1,0), (0,-1,1), (0,0,-1),          (0,0,1), (0,1,-1), (0,1,0), (0,1,1),
			(1,-1,-1), (1,-1,0), (1,-1,1), (1,0,-1), (1,0,0), (1,0,1), (1,1,-1), (1,1,0), (1,1,1)
		};

	public List<Coordinate3D> Rotations => new()
		{
			(x,y,z),
			(x,z,-y),
			(x,-y,-z),
			(x,-z,y),
			(y,x,-z),
			(y,z,x),
			(y,-x,z),
			(y,-z,-x),
			(z,x,y),
			(z,y,-x),
			(z,-x,-y),
			(z,-y,x),
			(-x,y,-z),
			(-x,z,y),
			(-x,-y,z),
			(-x,-z,-y),
			(-y,x,z),
			(-y,z,-x),
			(-y,-x,-z),
			(-y,-z,x),
			(-z,x,-y),
			(-z,y,x),
			(-z,-x,y),
			(-z,-y,-x)
		};
}


public class Brick
{
	public char id;
	public Coordinate3D Start;
	public Coordinate3D End;

	public List<Brick> Supports = new();
	public List<Brick> SupportedBy = new();

	public int Length => Start.ManhattanDistance(End) + 1;

	public IEnumerable<Coordinate3D> Members()
	{
		yield return Start;
		var curLoc = Start;
		while (curLoc != End)
		{
			if (Start.x == End.x && Start.y == End.y) curLoc = curLoc + (0, 0, 1); //Vertically Oriented Brick 
			else if (Start.x == End.x && Start.z == End.z) curLoc = curLoc + (0, 1, 0); //Oriented Along Y- Axis
			else if (Start.y == End.y && Start.z == End.z) curLoc = curLoc + (1, 0, 0); //Oriented Along x- Axis
			yield return curLoc;
		}
	}

	public Brick(char id, Coordinate3D p1, Coordinate3D p2)
	{
		this.id = id;
		if (p1.x < p2.x || p1.y < p2.y || p1.z < p2.z)
		{
			Start = p1;
			End = p2;
		}
		else
		{
			Start = p2;
			End = p2;
		}
	}

	public override string ToString()
	{
		return id.ToString();
	}
}